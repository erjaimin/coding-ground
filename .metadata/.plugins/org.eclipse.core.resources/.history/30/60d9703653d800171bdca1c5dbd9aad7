package com.main;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ImageUtil {

	public static Image getScaledImage(File file, int width, int height, boolean convert) {
		if (file != null) {
			BufferedImage bufImage = readImage(file);
			if (convert)
				return getScaledImage(bufImage, width, height);
			else
				return bufImage;
		}
		return null;
	}

	public static BufferedImage readImage(File selectedFile) {
		BufferedImage bufImage = null;
		if(selectedFile != null){
			try {
				bufImage = ImageIO.read(selectedFile);
			} catch (IOException e) {
				System.out.println("Error reading the input file");
				System.err.println(e.getMessage());
			}
		}
		return bufImage;
	}
	
	public static Image getScaledImage(Image bufImage, int width, int height, boolean higherQuality){
		if(bufImage != null){
			return bufImage.getScaledInstance(width, height, Image.SCALE_FAST);
		}
		return null;
		
		int type = (bufImage.getTransparency() == Transparency.OPAQUE) ?
		        BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;
		    BufferedImage ret = (BufferedImage)img;
		    int w, h;
		    if (higherQuality) {
		        // Use multi-step technique: start with original size, then
		        // scale down in multiple passes with drawImage()
		        // until the target size is reached
		        w = img.getWidth();
		        h = img.getHeight();
		    } else {
		        // Use one-step technique: scale directly from original
		        // size to target size with a single drawImage() call
		        w = targetWidth;
		        h = targetHeight;
		    }

		    do {
		        if (higherQuality && w > targetWidth) {
		            w /= 2;
		            if (w < targetWidth) {
		                w = targetWidth;
		            }
		        }

		        if (higherQuality && h > targetHeight) {
		            h /= 2;
		            if (h < targetHeight) {
		                h = targetHeight;
		            }
		        }

		        BufferedImage tmp = new BufferedImage(w, h, type);
		        Graphics2D g2 = tmp.createGraphics();
		        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint);
		        g2.drawImage(ret, 0, 0, w, h, null);
		        g2.dispose();

		        ret = tmp;
		    } while (w != targetWidth || h != targetHeight);

		    return ret;
	}
}
