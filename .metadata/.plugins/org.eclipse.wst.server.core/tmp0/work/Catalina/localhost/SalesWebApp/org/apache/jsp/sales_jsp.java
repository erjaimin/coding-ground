/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2017-11-28 05:14:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;

public final class sales_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 String query1 = "SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.CUSTOMER_NAME "+ 
	    "FROM CUSTOMER INNER JOIN SALES_ORDER ON SALES_ORDER.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID "+
	    "GROUP BY CUSTOMER.CUSTOMER_ID, CUSTOMER.CUSTOMER_NAME";
	String query2 = "SELECT SUM(SALES_ORDER_LINE_ITEM.QUANTITY) AS Quantity, "+ 
	    "BOM.OUTPUT_DESCRIPTION AS Product, SALES_ORDER.BILLING_DATE FROM SALES_ORDER_LINE_ITEM "+ 
	    "INNER JOIN sales_order ON SALES_ORDER_LINE_ITEM.SALES_ORDER_ID = SALES_ORDER.SALES_ORDER_ID "+ 
	    "INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = SALES_ORDER.CUSTOMER_ID "+
	    "INNER JOIN BOM ON BOM.EFFECTIVE_DATE = SALES_ORDER.DELIVERY_DATE "+ 
	    "AND BOM.OUTPUT_PRODUCT_ID = SALES_ORDER_LINE_ITEM.PRODUCT_ID "+ 
	    "WHERE CUSTOMER.CUSTOMER_ID = ? GROUP BY "+
	    "BOM.OUTPUT_DESCRIPTION, SALES_ORDER.BILLING_DATE";
	String query3 ="SELECT SIM_DATE FROM CURRENT_SIM_DATE"; 
	/* String query3 ="SELECT SIM_DATE.SIM_DATE FROM CURRENT_SIM_DATE "+
	    "INNER JOIN SIM_DATE ON CURRENT_SIM_DATE.CUR_NB_DAYS >= SIM_DATE.NB_DAYS "+
	    "WHERE VDAY <= MAX_DAYS_PER_ROUND"; */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1509855993000L));
    _jspx_dependants.put("jar:file:/Users/i858280/Documents/workspace/jpws/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SalesWebApp/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153399482000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write(" \n");
      out.write('\n');
 	
	ResultSet clients = null;
	ResultSet products = null;
	ResultSet dates = null;
	String server = "avenger.hec.ca\\erpsim";
    String database = "ERPSIM";
    String password = "ERPSIM";
	String path = null;
	Map<String, Map<String, Integer>> productDateMap = new HashMap<>();
	Map<String, Integer> dateMap = new LinkedHashMap<>();;
	try{	
		/* Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        String connectionUrl = "jdbc:sqlserver://"+server+";databaseName="+database+";user=DAIRY1;password="+password+";";
        Connection connection = (Connection) DriverManager.getConnection(connectionUrl); */
        Class.forName("com.mysql.jdbc.Driver");
        String connectionUrl = "jdbc:mysql://localhost:3306/ERPSIM";
        Connection connection = (Connection) DriverManager.getConnection(connectionUrl, "root", "system");
		Statement st = connection.createStatement();
		clients = st.executeQuery(query1);
		String client = request.getParameter("client");
		if(client != "" && client != null && !client.equals("&")){
			Statement st2 = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			products = st2.executeQuery(query2.replace("?", client));
			Statement st3 = connection.createStatement();
			dates =  st3.executeQuery(query3);
			if(dates != null && products != null){
				while(dates.next()){
					dateMap.put(dates.getString(1), 0);
				}
				while(products.next()){
					int quantity = products.getInt(1);
					String product = products.getString(2);
					String date = products.getString(3);
					//System.out.println(product+";"+date+";"+quantity);
					Map<String, Integer> map = null;
					if(productDateMap.get(product) == null){
						productDateMap.put(product, new LinkedHashMap<>(dateMap));
						map = productDateMap.get(product);
						map.put(date, quantity);
					}else{
						map = productDateMap.get(product);
						if(map.get(date) != null)
							map.put(date, map.get(date)+quantity);
					}
					productDateMap.put(product, map);
				}
				products.beforeFirst();
				/* for(Map.Entry<String, Map<String, Integer>> entry : productDateMap.entrySet()){
					System.out.println("Product: "+entry.getKey());
					for(Map.Entry<String, Integer> item : entry.getValue().entrySet()){
						System.out.println(item.getKey()+", "+item.getValue());
				 	}
				}*/
			}	
		}
	}catch(Exception e){
		System.out.println("Could not connect to database");
		e.printStackTrace();
	}

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("\t<title>Sales Statistics</title>\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\t\talert('ji');\n");
      out.write("\t\t\tif(localStorage.getItem('selectedIndex') > 0){\n");
      out.write("\t\t\t\tdocument.getElementById(\"customerDropDown\").options[localStorage.getItem('selectedIndex')].selected = true;\n");
      out.write("\t\t\t\tdocument.getElementById('btnTable').style.display = \"inline-block\";\n");
      out.write("\t\t\t\tdocument.getElementById('btnGraph').style.display = \"inline-block\";\n");
      out.write("\t\t\t}else{\n");
      out.write("\t\t\t\tdocument.getElementById('btnTable').style.display = \"none\";\n");
      out.write("\t\t\t\tdocument.getElementById('btnGraph').style.display = \"none\";\n");
      out.write("\t\t\t}\t\n");
      out.write("\t\t\t\tvar ctx = document.getElementById('myChart').getContext('2d');\n");
      out.write("\t\t\t\tvar options = {\n");
      out.write("\t\t\t\t\t\tscales: {\n");
      out.write("\t\t\t\t\t\t\txAxes: [ { ticks: { autoSkip: false }\n");
      out.write("\t\t\t\t\t\t\t\t } ]\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t};\n");
      out.write("\t\t\t\tvar donnees = {\n");
      out.write("\t\t\t\t\t    labels: [\n");
      out.write("\t\t\t\t\t    \t");
int noOfDates = dateMap.size(); 
					    	  int counter1 = 0;	
					    	  for(Map.Entry<String, Integer> date : dateMap.entrySet()){
      out.write("\n");
      out.write("\t\t\t\t\t    \t  \t");
      out.print("'"+date.getKey()+"'");
      out.write("\n");
      out.write("\t\t\t\t\t    \t  \t");
if(counter1 +1 < noOfDates){counter1++;
      out.write("\n");
      out.write("\t\t\t\t\t    \t  \t\t,\n");
      out.write("\t\t\t\t\t    \t");
}}
      out.write("\t\t\n");
      out.write("\t\t\t\t\t    ],\n");
      out.write("\t\t\t\t\t    datasets: [\n");
      out.write("\t\t\t\t\t    \t");
int noOfProducts = productDateMap.size(); 
					    	  int counter2 = 0;	
					    	  for(Map.Entry<String, Map<String,Integer>> product : productDateMap.entrySet()){
      out.write("\n");
      out.write("\t\t\t\t\t    \t  {\n");
      out.write("\t\t\t\t\t\t\t      label: '");
      out.print(product.getKey());
      out.write("',\n");
      out.write("\t\t\t\t\t\t\t      data:[\n");
      out.write("\t\t\t\t\t\t\t    \t  ");
 int counter3 = 0;
							    	  for(Map.Entry<String, Integer> date : product.getValue().entrySet()){
							    	  
      out.write("\n");
      out.write("\t\t\t\t\t\t\t    \t  ");
      out.print(date.getValue());
      out.write("\n");
      out.write("\t\t\t\t\t\t\t    \t  ");
if(counter3 +1 < noOfDates){counter3++;
      out.write("\n");
      out.write("\t\t\t\t\t\t\t    \t  ,\n");
      out.write("\t\t\t\t\t\t\t    \t  ");
}}
      out.write("\n");
      out.write("\t\t\t\t\t\t\t      ]}\n");
      out.write("\t\t\t\t\t    \t  \t");
if(counter2 +1 < noOfProducts){counter2++;
      out.write("\n");
      out.write("\t\t\t\t\t    \t  \t\t,\n");
      out.write("\t\t\t\t\t    \t");
}}
      out.write("\n");
      out.write("\t\t\t\t\t    ]\n");
      out.write("\t\t\t\t\t  };\n");
      out.write("\t\t\t\talert(donnees);\n");
      out.write("\t\t\t\tvar myChart = new Chart(ctx, {\n");
      out.write("\t\t\t\t  type: 'line',\n");
      out.write("\t\t\t\t  data: donnees,\n");
      out.write("\t\t\t\t  options: options\n");
      out.write("\t\t\t\t}); \n");
      out.write("\t\t\n");
      out.write("\t\tfunction fetchClientDetails(e){\n");
      out.write("\t\t\tvar selectedValue= e.options[e.selectedIndex].value;\n");
      out.write("\t\t\tlocalStorage.setItem('selectedIndex',e.selectedIndex);\n");
      out.write("\t\t\tif(e.selectedIndex > 0){\n");
      out.write("\t\t\t\twindow.location.replace(\"sales.jsp?client=\" + selectedValue);\n");
      out.write("\t\t\t}else{\n");
      out.write("\t\t\t\twindow.location.replace(\"sales.jsp?client=&\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction tableView(){\n");
      out.write("\t\t\tlocalStorage.removeItem('view');\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction graphView(){\n");
      out.write("\t\t\talert('graph');\n");
      out.write("\t\t\tlocalStorage.setItem('view','graph');\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div class=\"header\">\n");
      out.write("\t\tClient : <select id=\"customerDropDown\" onchange=\"fetchClientDetails(this);\">\n");
      out.write("\t\t\t<option value=\"&\" selected>--Choose Client--</option>\n");
      out.write("\t\t\t");
if(clients != null){ 
	            while(clients.next()){
      out.write("\n");
      out.write("\t\t\t\t\t<option value=\"");
      out.print(clients.getString(1) );
      out.write('"');
      out.write('>');
      out.print(clients.getString(2) );
      out.write("</option>\n");
      out.write("\t\t\t");
}} 
      out.write("\n");
      out.write("\t\t</select> \n");
      out.write("\t\t<input type=\"button\" id=\"btnTable\" value=\"Table\" onclick=\"tableView();\"/> \n");
      out.write("\t\t<input type=\"button\" id=\"btnGraph\" value=\"Graph\" onclick=\"graphView();\"/>\n");
      out.write("\t</div>\n");
      out.write("\t<div>\n");
      out.write("\t\t<table>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<th>Date</th>\n");
      out.write("\t\t\t\t<th>Product</th>\n");
      out.write("\t\t\t\t<th>Quantity</th>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t");
if(products != null){
	            while(products.next()){
      out.write("\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>");
      out.print(products.getString(3) );
      out.write("</td>\n");
      out.write("\t\t\t\t<td>");
      out.print(products.getString(2) );
      out.write("</td>\n");
      out.write("\t\t\t\t<td>");
      out.print(products.getString(1) );
      out.write("</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t");
}}
      out.write("\n");
      out.write("\t\t</table>\n");
      out.write("\t</div>\n");
      out.write("\t<div>\n");
      out.write("\t\t<canvas id=\"myChart\" width='800' height='600'></canvas>\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
